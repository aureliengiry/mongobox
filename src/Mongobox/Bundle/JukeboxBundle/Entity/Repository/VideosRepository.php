<?php

namespace Mongobox\Bundle\JukeboxBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * VideosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideosRepository extends EntityRepository
{
    public function next()
    {
        $q = $this
                ->createQueryBuilder('v')
                ->select('v')
                ->where('v.done = 0')
                ->orderBy('v.date', 'ASC')
                ->setMaxResults(1)
                ->getQuery()
        ;

        $result = $q->getOneOrNullResult();

        //Si il n'y en a plus à passer, on fait un random
        if (is_null($result)) {
            $result = $this->random();
        }

        return $result;
    }

    /**
     * Fonction de recherche des vidéos
     *
     * @param unknown_type $search
     * @param unknown_type $page
     * @param unknown_type $limit
     * @param unknown_type $filters
     * @return unknown
     */
    public function search($group, $search, $page, $limit, $filters = array('sortBy' => 'v.title', 'orderBy' => 'ASC') )
    {
		$parameters = array('group' => $group);
        $q = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('vg')
				->from('MongoboxJukeboxBundle:VideoGroup', 'vg')
				->leftJoin('vg.video', 'v')
				->where('vg.group = :group')
                ->orderBy($filters['sortBy'], strtoupper($filters['orderBy']) )
                ->setMaxResults($limit)
                ->setFirstResult($limit * ($page-1));

        if (array_key_exists('title', $search)) {
            $q
                ->andWhere('v.title LIKE :title');
                $parameters['title'] = '%'.$search['title'].'%';
        }
		$q->setParameters($parameters);


        $q = $q->getQuery();

        $result = $q->getResult();

        return $result;
    }

	public function findGroupAll($group)
	{
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();

		$qb->select('v')
		->from('MongoboxJukeboxBundle:Videos', 'v')
		->innerJoin('v.video_groups', 'vg')
		->where("vg.group = :group")
		->setParameters( array(
				'group' => $group
		));

		$query = $qb->getQuery();
		return $query->getResult();
	}

	public function wipeTags($video)
	{
		$em = $this->getEntityManager();
		$conn = $em->getConnection();
		$sql = "DELETE FROM video_videos_tags WHERE id_video = ".$video->getId();
		$conn->executeUpdate($sql);
	}

    /**
     * Retrieve the total number of videos in the given group.
     * If no group is given, then retrieves the total number of videos in the application.
     *
     * @param int $groupId
     * @return int
     */
    public function getCount($groupId = null)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb
            ->select('count(v.id)')
            ->from('MongoboxJukeboxBundle:Videos', 'v')
        ;

        if ($groupId !== null) {
            $qb
                ->innerJoin('v.video_groups', 'vg')
                ->where('vg.group = :group')
                ->setParameter('group', $groupId)
            ;
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * Retrieve the ranking of the top 10 contributors
     *
     * @param int $groupId
     * @return array
     */
    public function getMaxCountPerUser($groupId = null)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb
            ->select('u.firstname, u.lastname, COUNT(u.id) AS nb_videos')
            ->from('MongoboxJukeboxBundle:VideoGroup', 'vg')
        ;

        if ($groupId !== null) {
            $qb
                ->where('vg.group = :group')
                ->setParameter('group', $groupId)
            ;
        }

        $qb
            ->innerJoin('vg.user', 'u')
            ->groupBy('u.id')
            ->orderBy('nb_videos', 'DESC')
            ->setMaxResults(10)
        ;

        $query = $qb->getQuery();

        return $query->getResult();
    }
}
