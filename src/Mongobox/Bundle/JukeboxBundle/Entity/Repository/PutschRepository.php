<?php

namespace Mongobox\Bundle\JukeboxBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Mongobox\Bundle\GroupBundle\Entity\Group;
use Mongobox\Bundle\JukeboxBundle\Entity\Putsch;
use Mongobox\Bundle\UsersBundle\Entity\User;

/**
 * PutschRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PutschRepository extends EntityRepository
{
    /**
     * Check if there is not already an ongoing attempt to this given group
     *
     * @param Group $group
     * @param User $user
     * @return array|boolean
     */
    protected function _checkAttemptForGroup(Group $group, User $user)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb
            ->select('putsches')
            ->from('MongoboxJukeboxBundle:Putsch', 'putsches')
            ->where('putsches.group = :group')
            ->andWhere('putsches.user != :user')
            ->andWhere('putsches.response is null')
            ->setParameters(array(
                'group' => $group,
                'user'  => $user
            ))
            ->setMaxResults(1)
            ->getQuery()
        ;

        $query = $qb->getQuery();

        try {
            $result = $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $result = false;
        }

        if ($result === false) {
            return true;
        } else {
            return array(
                'result'    => 'deny',
                'fail'      => 'group'
            );
        }
    }

    /**
     * Check if the user does not already have an ongoing attempt
     *
     * @param User $user
     * @return array|boolean
     */
    protected function _checkUserOngoingAttempt(User $user)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qb
            ->select('putsches')
            ->from('MongoboxJukeboxBundle:Putsch', 'putsches')
            ->where('putsches.user = :user')
            ->andWhere('putsches.response is null')
            ->setParameters(array(
                'user' => $user
            ))
            ->setMaxResults(1)
            ->getQuery()
        ;

        $query = $qb->getQuery();

        try {
            $result = $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $result = false;
        }

        if ($result === false) {
            return true;
        } else {
            return array(
                'result'    => 'deny',
                'fail'      => 'user-duplicate'
            );
        }

        return true;
    }

    /**
     * Check if the user has not made ​​a too recent request
     *
     * @param User $user
     * @param integer $waiting
     * @return array|boolean
     */
    protected function _checkUserWaitingLimit(User $user, $waiting)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $date = new \DateTime();
        $date->modify("- $waiting minutes");

        $qb
            ->select('putsches')
            ->from('MongoboxJukeboxBundle:Putsch', 'putsches')
            ->where('putsches.user = :user')
            ->andWhere('putsches.date > :date')
            ->setParameters(array(
                'user'  => $user,
                'date'  => $date
            ))
            ->setMaxResults(1)
            ->getQuery()
        ;

        $query = $qb->getQuery();

        try {
            $result = $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $result = false;
        }

        if ($result === false) {
            return true;
        } else {
            return array(
                'result'    => 'deny',
                'fail'      => 'user-waiting'
            );
        }

    }

    /**
     * Check if the user can perform a putsch in the given group
     *
     * @param Group $group
     * @param User $user
     * @param integer $waiting
     * @return array
     */
    public function checkPutschAttempt(Group $group, User $user, $waiting = 0)
    {
        $groupAvailability = $this->_checkAttemptForGroup($group, $user);
        if ($groupAvailability !== true) {
            return $groupAvailability;
        }

        $userOngoingCheck = $this->_checkUserOngoingAttempt($user);
        if ($userOngoingCheck !== true) {
            return $userOngoingCheck;
        }

        $userWaitingCheck = $this->_checkUserWaitingLimit($user, $waiting);
        if ($userWaitingCheck !== true) {
            return $userWaitingCheck;
        }

        $newAttempt = new Putsch();
        $newAttempt->setDate(new \DateTime());
        $newAttempt->setGroup($group);
        $newAttempt->setUser($user);

        $em = $this->getEntityManager();
        $em->persist($newAttempt);
        $em->flush($newAttempt);

        return array(
            'result'    => 'allow',
            'fail'      => null
        );
    }
}
