<?php

namespace Mongobox\Bundle\TumblrBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TumblrRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TumblrRepository extends EntityRepository
{
	public function findLast($groups, $maxResults = 0, $firstResult = 0)
	{
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();

		$qb->select('t')
		->from('MongoboxTumblrBundle:Tumblr', 't')
		->leftJoin('t.groups', 'g')
		->where("g.id IN (:groups)")
		->orderBy('t.date', 'DESC')
		->groupBy('t.id_tumblr')
		->setParameters( array(
				'groups' => $groups
		));
		if($maxResults != 0)
		{
			$qb->setMaxResults($maxResults)
			->setFirstResult($firstResult);
		}

		$query = $qb->getQuery();
		return $query->getResult();
	}

    /**
     * Function to get next tumblr
     *
     * @param string|int $entityId
     * @return boolean|array
     */
    public function getNextEntity( $entityId )
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT t.id_tumblr,t.text FROM MongoboxTumblrBundle:Tumblr t WHERE t.id_tumblr > :entityId ORDER BY t.id_tumblr')
            ->setParameter('entityId', $entityId)
            ->setFirstResult(0)
            ->setMaxResults(1)
        ;

        try{
            $result = $query->getSingleResult();
            return $result;
        }
        catch (\Doctrine\ORM\NoResultException $e){
            return false;
        }

    }

    /**
     * Function to get prev tumblr
     *
     * @param string|int $entityId
     * @return boolean|array
     */
    public function getPrevEntity( $entityId )
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT t.id_tumblr,t.text FROM MongoboxTumblrBundle:Tumblr t WHERE t.id_tumblr < :entityId ORDER BY t.id_tumblr DESC')
            ->setParameter('entityId', $entityId)
            ->setFirstResult(0)
            ->setMaxResults(1)
        ;

        try {
            $result = $query->getSingleResult();
            return $result;
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return false;
        }

    }
}
